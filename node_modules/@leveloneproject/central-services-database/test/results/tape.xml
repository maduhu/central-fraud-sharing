<?xml version="1.0"?>
<testsuites>
  <testsuite tests="0" failures="0" errors="0" name="database"/>
  <testsuite tests="0" failures="0" errors="0" name="Index"/>
  <testsuite tests="0" failures="0" errors="0" name="exporting should"/>
  <testsuite tests="2" failures="0" errors="0" name="export convenience methods">
    <testcase name="#1 should be truthy"/>
    <testcase name="#2 should be truthy"/>
  </testsuite>
  <testsuite tests="0" failures="0" errors="0" name="migrations"/>
  <testsuite tests="0" failures="0" errors="0" name="table"/>
  <testsuite tests="0" failures="0" errors="0" name="database connect should"/>
  <testsuite tests="0" failures="0" errors="0" name="database known table property should"/>
  <testsuite tests="0" failures="0" errors="0" name="database disconnect should"/>
  <testsuite tests="0" failures="0" errors="0" name="database from should"/>
  <testsuite tests="0" failures="0" errors="0" name="migrations migrate should"/>
  <testsuite tests="0" failures="0" errors="0" name="table insert should"/>
  <testsuite tests="0" failures="0" errors="0" name="table update should"/>
  <testsuite tests="0" failures="0" errors="0" name="table find should"/>
  <testsuite tests="0" failures="0" errors="0" name="table findOne should"/>
  <testsuite tests="0" failures="0" errors="0" name="table destroy should"/>
  <testsuite tests="0" failures="0" errors="0" name="table truncate should"/>
  <testsuite tests="0" failures="0" errors="0" name="table count should"/>
  <testsuite tests="0" failures="0" errors="0" name="table max should"/>
  <testsuite tests="0" failures="0" errors="0" name="table query function should"/>
  <testsuite tests="8" failures="0" errors="0" name="database connect should connect using connection string and setup table properties">
    <testcase name="#3 should be truthy"/>
    <testcase name="#4 should be equal"/>
    <testcase name="#5 should be equal"/>
    <testcase name="#6 should be equal"/>
    <testcase name="#7 should be truthy"/>
    <testcase name="#8 should be truthy"/>
    <testcase name="#9 should be truthy"/>
    <testcase name="#10 should be falsy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="database connect should throw error for invalid connection string">
    <testcase name="#11 should be falsy"/>
    <testcase name="#12 should be equal"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="database connect should throw error for unsupported database type in connection string">
    <testcase name="#13 should be falsy"/>
    <testcase name="#14 should be equal"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="database connect should throw error if database type not supported for listing tables">
    <testcase name="#15 should be equal"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="database connect should only create connection once on multiple connect calls">
    <testcase name="#16 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="database known table property should create new query object for known table">
    <testcase name="#17 should be equal"/>
    <testcase name="#18 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="database disconnect should call destroy and reset connection">
    <testcase name="#19 should be truthy"/>
    <testcase name="#20 should be truthy"/>
    <testcase name="#21 should be falsy"/>
  </testsuite>
  <testsuite tests="4" failures="0" errors="0" name="database disconnect should remove table properties and reset table list to empty">
    <testcase name="#22 should be truthy"/>
    <testcase name="#23 should be equal"/>
    <testcase name="#24 should be falsy"/>
    <testcase name="#25 should be equal"/>
  </testsuite>
  <testsuite tests="5" failures="0" errors="0" name="database disconnect should do nothing if not connected">
    <testcase name="#26 should be truthy"/>
    <testcase name="#27 should be equal"/>
    <testcase name="#28 should be falsy"/>
    <testcase name="#29 should be equal"/>
    <testcase name="#30 should be falsy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="database from should create a new knex object for specified table">
    <testcase name="#31 should be equal"/>
    <testcase name="#32 should be truthy"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="database from should throw error if database not connected">
    <testcase name="#33 should be equal"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="migrations migrate should run migrations">
    <testcase name="#34 should be truthy"/>
    <testcase name="#35 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table insert should return inserted record">
    <testcase name="#36 should be equal"/>
    <testcase name="#37 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table insert should throw error if no record returned from insert">
    <testcase name="#38 should be equal"/>
    <testcase name="#39 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table update should return updated record">
    <testcase name="#40 should be equal"/>
    <testcase name="#41 should be truthy"/>
    <testcase name="#42 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table update should return multiple updated records">
    <testcase name="#43 should be equal"/>
    <testcase name="#44 should be truthy"/>
    <testcase name="#45 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table update should return null if no record updated">
    <testcase name="#46 should be falsy"/>
    <testcase name="#47 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table update should handle empty criteria">
    <testcase name="#48 should be equal"/>
    <testcase name="#49 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table update should handle null criteria">
    <testcase name="#50 should be equal"/>
    <testcase name="#51 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should return matching records">
    <testcase name="#52 should be equal"/>
    <testcase name="#53 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table find should return matching record using order by">
    <testcase name="#54 should be equal"/>
    <testcase name="#55 should be truthy"/>
    <testcase name="#56 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should handle criteria with conditions">
    <testcase name="#57 should be equal"/>
    <testcase name="#58 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should handle empty condition key">
    <testcase name="#59 should be equal"/>
    <testcase name="#60 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should ignore unknown condition">
    <testcase name="#61 should be equal"/>
    <testcase name="#62 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should handle criteria with array">
    <testcase name="#63 should be equal"/>
    <testcase name="#64 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table find should handle multiple criteria">
    <testcase name="#65 should be equal"/>
    <testcase name="#66 should be truthy"/>
    <testcase name="#67 should be truthy"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="table find should handle empty criteria">
    <testcase name="#68 should be equal"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="table find should handle null criteria">
    <testcase name="#69 should be equal"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table find should default to ascending order if not provided">
    <testcase name="#70 should be equal"/>
    <testcase name="#71 should be truthy"/>
    <testcase name="#72 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should ignore order by with too many fields">
    <testcase name="#73 should be equal"/>
    <testcase name="#74 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table find should handle order with no field value">
    <testcase name="#75 should be equal"/>
    <testcase name="#76 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table findOne should return first matching record">
    <testcase name="#77 should be equal"/>
    <testcase name="#78 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table findOne should return null if no record found">
    <testcase name="#79 should be falsy"/>
    <testcase name="#80 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table destroy should return deleted record">
    <testcase name="#81 should be equal"/>
    <testcase name="#82 should be truthy"/>
    <testcase name="#83 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table destroy should return multiple deleted records">
    <testcase name="#84 should be equal"/>
    <testcase name="#85 should be truthy"/>
    <testcase name="#86 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table destroy should return null if no record deleted">
    <testcase name="#87 should be falsy"/>
    <testcase name="#88 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table destroy should handle empty criteria">
    <testcase name="#89 should be equal"/>
    <testcase name="#90 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table destroy should handle null criteria">
    <testcase name="#91 should be equal"/>
    <testcase name="#92 should be truthy"/>
  </testsuite>
  <testsuite tests="1" failures="0" errors="0" name="table truncate should call truncate method on builder">
    <testcase name="#93 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table count should return integer count">
    <testcase name="#94 should be equal"/>
    <testcase name="#95 should be truthy"/>
    <testcase name="#96 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table count should handle empty criteria">
    <testcase name="#97 should be equal"/>
    <testcase name="#98 should be truthy"/>
  </testsuite>
  <testsuite tests="3" failures="0" errors="0" name="table max should return integer max">
    <testcase name="#99 should be equal"/>
    <testcase name="#100 should be truthy"/>
    <testcase name="#101 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table max should handle empty criteria">
    <testcase name="#102 should be equal"/>
    <testcase name="#103 should be truthy"/>
  </testsuite>
  <testsuite tests="2" failures="0" errors="0" name="table query function should pass builder object to callback">
    <testcase name="#104 should be equal"/>
    <testcase name="#105 should be truthy"/>
  </testsuite>
</testsuites>
